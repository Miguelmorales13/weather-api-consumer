{"version":3,"sources":["utils/http.util.ts","services/air.http.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Http","axios","create","baseURL","interceptors","request","use","url","includes","response","data","error","Promise","reject","AirHttp","country","a","get","res","console","log","instance","airHttp","getInstance","useStyles","makeStyles","theme","main","minWidth","minHeight","backgroundColor","color","display","justifyContent","alignItems","padding","spacing","img","itemDown","textAlign","subItemDown","borderTop","footer","position","bottom","left","header","top","right","borderContainer","border","borderRadius","App","useState","nearestCity","setSearestCity","classes","useTheme","isSm","useMediaQuery","breakpoints","down","handleInit","getNearestCity","useEffect","Grid","container","className","item","xs","md","Typography","variant","city","align","current","weather","tp","Box","src","ic","width","height","alt","hu","ws","pr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c09194e.chunk.js","sourcesContent":["import axios, {AxiosError, AxiosRequestConfig, AxiosResponse} from \"axios\";\n\nconst KEY = '696fc64b-2955-4012-a7da-67542d5b2445'\n\nconst Http = axios.create(\n    {baseURL: 'https://api.airvisual.com/v2/'}\n)\n\nconst requestInterceptor = (request: AxiosRequestConfig) => {\n    request.url = `${request.url}${request.url?.includes('?') ? '&' : '?'}key=${KEY}`\n    return request\n}\nconst responseInterceptor = (response: AxiosResponse) => {\n    let responseProcessed = response.data.data ?? response.data ?? response\n\n    return responseProcessed\n}\nconst errorInterceptor = (error: AxiosError) => {\n\n    return Promise.reject(error)\n}\nHttp.interceptors.request.use(requestInterceptor)\nHttp.interceptors.response.use(responseInterceptor, errorInterceptor)\nexport default Http\n\n\n","import {States} from \"../models/State\";\nimport Http from \"../utils/http.util\";\nimport {NearestCity} from \"../models/NearestCity\";\n\n\nexport default class AirHttp {\n    private static instance:AirHttp\n\n    private constructor() {  }\n    public static getInstance(): AirHttp {\n        if (!AirHttp.instance) {\n            AirHttp.instance = new AirHttp();\n        }\n        return AirHttp.instance;\n    }\n\n\n    async getStates(country:string):Promise<States>{\n        const res:States = await Http.get(`states?country=${country}`)\n        console.log(res)\n        return res\n    }\n    async getNearestCity():Promise<NearestCity>{\n        const res:NearestCity = await Http.get(`nearest_city`)\n        console.log(res)\n        return res\n    }\n\n\n\n\n\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport AirHttp from \"./services/air.http\";\nimport {NearestCity} from \"./models/NearestCity\";\nimport {Box, Grid, makeStyles, Typography, useMediaQuery, useTheme} from \"@material-ui/core\";\n\nconst airHttp = AirHttp.getInstance()\nconst useStyles = makeStyles(theme => ({\n    main: {\n        minWidth: '100%',\n        minHeight: '100vh',\n        backgroundColor: '#35baf6',\n        color: '#fff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: theme.spacing(3)\n    },\n\n    img: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    itemDown: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center'\n    },\n    subItemDown: {\n        borderTop: '2px  solid #fff',\n        padding: theme.spacing(2),\n    },\n    footer: {\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        padding: theme.spacing(1)\n    },\n    header: {\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        padding: theme.spacing(1)\n    },\n    borderContainer: {\n        padding: theme.spacing(0.5),\n        border: '0.5rem solid #fff',\n        borderRadius: 10\n    }\n}))\n\nfunction App() {\n    const [nearestCity, setSearestCity] = useState<NearestCity>({})\n    const classes = useStyles()\n    const theme = useTheme()\n    const isSm = useMediaQuery(theme.breakpoints.down('sm'))\n    const handleInit = async () => {\n        const data = await airHttp.getNearestCity()\n        setSearestCity(data)\n    }\n\n    useEffect(() => {\n        handleInit()\n    }, [])\n    return (\n        <Grid container className={classes.main}>\n            <Grid item xs={12} md={6}>\n                <Grid container className={classes.borderContainer}>\n                    <Grid item xs={12}>\n                        <Typography variant='h3'>\n                            {nearestCity.city}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography align=\"center\" variant='h1'>\n                            {nearestCity.current?.weather?.tp}Â°C\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box className={classes.img}>\n                            <img src={`https://airvisual.com/images/${nearestCity.current?.weather?.ic}.png`} width={isSm ? 200 : 300} height={isSm ? 200 : 300} alt=\"\"/>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={4} className={classes.itemDown}>\n                        <div className={classes.subItemDown}>\n                            <span>Hu</span> <br/>{nearestCity.current?.weather?.hu} %\n                        </div>\n\n                    </Grid>\n                    <Grid item xs={4} className={classes.itemDown}>\n                        <div className={classes.subItemDown}>\n                            <span>Ws</span> <br/>{nearestCity.current?.weather?.ws} m/s\n                        </div>\n\n                    </Grid>\n                    <Grid item xs={4} className={classes.itemDown}>\n                        <div className={classes.subItemDown}>\n                            <span>Pr</span> <br/>{nearestCity.current?.weather?.pr} hpa\n                        </div>\n\n                    </Grid>\n                    <div className=\"footer flex\">\n                    </div>\n\n                </Grid>\n            </Grid>\n            <Grid item className={classes.footer}>\n                <Typography variant=\"h6\">power by - Morales Reyes Miguel Angel</Typography>\n            </Grid>\n            <Grid item className={classes.header}>\n                <Typography variant=\"h6\">Weather api consumer</Typography>\n            </Grid>\n\n        </Grid>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}